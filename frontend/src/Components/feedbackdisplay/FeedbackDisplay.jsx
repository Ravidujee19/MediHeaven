import React, { useEffect, useRef, useState } from "react";
import axios from "axios";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import "./Feedbackd.css";
import Swal from "sweetalert2"; //new
import { Col } from "react-bootstrap";//new
import { FaHome, FaSignOutAlt } from "react-icons/fa"; //new
import { useNavigate } from "react-router-dom"; // new

const FeedbackDisplay = () => {
  const [feedbacks, setFeedbacks] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [filteredFeedbacks, setFilteredFeedbacks] = useState([]);
  const [searchHistory, setSearchHistory] = useState(() => {
    const saved = localStorage.getItem("searchHistoryV2");
    return saved ? JSON.parse(saved) : [];
  });

  const componentRef = useRef(null);

  useEffect(() => {
    fetchFeedbacks();
  }, []);

  const fetchFeedbacks = () => {
    axios.get("http://localhost:5000/api/feedback")
      .then(res => {
        setFeedbacks(res.data);
        setFilteredFeedbacks(res.data);
      })
      .catch(err => console.error("Error fetching feedback:", err));
  };

  const handleDelete = (id) => {
    if (window.confirm("Are you sure you want to delete this feedback?")) {
      axios.delete(`http://localhost:5000/api/feedback/${id}`)
        .then(() => fetchFeedbacks())
        .catch(err => console.error("Error deleting feedback:", err));
    }
  };

  const handleEdit = (fb) => {
    const updatedComment = prompt("Edit comment:", fb.comments);
    const updatedRating = prompt("Edit rating (1-5):", fb.rating);
    if (updatedComment !== null && updatedRating !== null) {
      axios.put(`http://localhost:5000/api/feedback/${fb._id}`, {
        ...fb,
        comments: updatedComment,
        rating: updatedRating
      })
        .then(() => fetchFeedbacks())
        .catch(err => console.error("Error updating feedback:", err));
    }
  };

  const handleSearch = () => {
    const filtered = feedbacks.filter(fb =>
      fb.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      fb.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
      fb.contact.includes(searchQuery)
    );
    setFilteredFeedbacks(filtered);

    if (searchQuery.trim() !== "") {
      const entry = { term: searchQuery, timestamp: new Date().toISOString() };
      const updatedHistory = [entry, ...searchHistory];
      setSearchHistory(updatedHistory);
      localStorage.setItem("searchHistoryV2", JSON.stringify(updatedHistory));
    }
  };

  // const handleDownloadSearchHistory = () => {
  //   const pdf = new jsPDF();
  //   const today = new Date().toDateString();

  //   pdf.setFontSize(18);
  //   pdf.text("Mediheaven - Categorized Search History", 14, 20);
  //   pdf.setFontSize(11);
  //   pdf.text("Email: mediheaven@gmail.com", 14, 30);
  //   pdf.text("Generated by: E.S.S Sasindi", 14, 36);
  //   pdf.text("Contact No: 0760931478", 14, 42);
  //   pdf.text(`Generated on: ${today}`, 14, 48);
  //   pdf.line(14, 50, 196, 50);

  //   const todayDate = new Date().toDateString();
  //   const yesterdayDate = new Date(Date.now() - 86400000).toDateString();

  //   const categorizeTerms = (entries) => {
  //     const names = [], emails = [], contacts = [];
  //     entries.forEach(({ term }) => {
  //       if (/^\d{7,15}$/.test(term)) contacts.push(term);
  //       else if (term.includes("@")) emails.push(term);
  //       else names.push(term);
  //     });
  //     return { names, emails, contacts };
  //   };

  //   let y = 60;

  //   const renderSection = (title, entries) => {
  //     const { names, emails, contacts } = categorizeTerms(entries);
  //     if (!names.length && !emails.length && !contacts.length) return;

  //     pdf.setFontSize(13);
  //     pdf.text(title, 14, y);
  //     y += 6;

  //     if (names.length) {
  //       pdf.text("Name Entries:", 16, y);
  //       names.forEach((t, i) => pdf.text(`• ${t}`, 22, y + 8 * (i + 1)));
  //       y += names.length * 8 + 8;
  //     }
  //     if (emails.length) {
  //       pdf.text("Email Entries:", 16, y);
  //       emails.forEach((t, i) => pdf.text(`• ${t}`, 22, y + 8 * (i + 1)));
  //       y += emails.length * 8 + 8;
  //     }
  //     if (contacts.length) {
  //       pdf.text("Contact Numbers:", 16, y);
  //       contacts.forEach((t, i) => pdf.text(`• ${t}`, 22, y + 8 * (i + 1)));
  //       y += contacts.length * 8 + 8;
  //     }
  //   };

  //   const todayEntries = searchHistory.filter(h => new Date(h.timestamp).toDateString() === todayDate);
  //   const yesterdayEntries = searchHistory.filter(h => new Date(h.timestamp).toDateString() === yesterdayDate);

  //   renderSection("Today's Searches:", todayEntries);
  //   renderSection("Yesterday's Searches:", yesterdayEntries);

  //   if (y === 60) pdf.text("No search history found.", 14, y);

  //   pdf.save("Search_History_Categorized.pdf");
  // };

  const handleDownloadSearchHistory = () => {
    const pdf = new jsPDF();
    const logoPath = `${window.location.origin}/mediheavenlogo.png`;
    const headerColor = [0, 128, 0];
    const dateStr = new Date().toLocaleString();
    const totalPagesExp = "{total_pages_count_string}";
    const todayDate = new Date().toDateString();
    const yesterdayDate = new Date(Date.now() - 86400000).toDateString();
  
    const categorizeTerms = (entries) => {
      const names = [], emails = [], contacts = [];
      entries.forEach(({ term }) => {
        if (/^\d{7,15}$/.test(term)) contacts.push(term);
        else if (term.includes("@")) emails.push(term);
        else names.push(term);
      });
      return { names, emails, contacts };
    };
  
    const loadImage = (url) => {
      return new Promise((resolve, reject) => {
        const img = new Image();
        img.crossOrigin = "anonymous";
        img.src = url;
        img.onload = () => resolve(img);
        img.onerror = reject;
      });
    };
  
    loadImage(logoPath)
      .then((img) => {
        const pageWidth = pdf.internal.pageSize.getWidth();
        const pageHeight = pdf.internal.pageSize.getHeight();
  
        // -- Header --
        pdf.setFillColor(...headerColor);
        pdf.rect(0, 0, pageWidth, 30, "F");
        pdf.addImage(img, "PNG", 10, 5, 15, 15);
        pdf.setTextColor(255, 255, 255);
        pdf.setFont("helvetica", "bold");
        pdf.setFontSize(16);
        pdf.text("MediHeaven - Categorized Search History", 30, 12);
  
        pdf.setFontSize(9);
        pdf.setFont("helvetica", "normal");
        pdf.text("Generated by: E.S.S Sasindi", 30, 18);
        pdf.text("Contact No: 0760931478", 30, 23);
        pdf.text("Email: sasindi@gmail.com", 110, 18);
        pdf.text(`Generated on: ${dateStr}`, 110, 23);
  
        // -- Main Content --
        let y = 40; // Start a bit lower after header
  
        const renderSection = (title, entries) => {
          const { names, emails, contacts } = categorizeTerms(entries);
          if (!names.length && !emails.length && !contacts.length) return;
  
          pdf.setFont("helvetica", "bold");
          pdf.setFontSize(13);
          pdf.setTextColor(0);
          pdf.text(title, 14, y);
          y += 6;
  
          pdf.setFont("helvetica", "normal");
          pdf.setFontSize(11);
  
          if (names.length) {
            pdf.text("Name Entries:", 16, y);
            names.forEach((t, i) => pdf.text(`• ${t}`, 22, y + 8 * (i + 1)));
            y += names.length * 8 + 8;
          }
          if (emails.length) {
            pdf.text("Email Entries:", 16, y);
            emails.forEach((t, i) => pdf.text(`• ${t}`, 22, y + 8 * (i + 1)));
            y += emails.length * 8 + 8;
          }
          if (contacts.length) {
            pdf.text("Contact Numbers:", 16, y);
            contacts.forEach((t, i) => pdf.text(`• ${t}`, 22, y + 8 * (i + 1)));
            y += contacts.length * 8 + 8;
          }
        };
  
        const todayEntries = searchHistory.filter(h => new Date(h.timestamp).toDateString() === todayDate);
        const yesterdayEntries = searchHistory.filter(h => new Date(h.timestamp).toDateString() === yesterdayDate);
  
        renderSection("Today's Searches:", todayEntries);
        renderSection("Yesterday's Searches:", yesterdayEntries);
  
        if (y === 40) {
          pdf.text("No search history found.", 14, y);
        }
  
        // -- Footer --
pdf.setFillColor(...headerColor);
pdf.rect(0, pageHeight - 20, pageWidth, 20, "F");

const footerText1 =
  "MediHeaven Pvt Ltd | No. 123, Janithma Med Lab, Nikaweratiya | Hotline: 037-4657329 | Email: mediheaven25@gmail.com";
const footerText2 = "© 2025 MediHeaven. All rights reserved.";
const pageText = `Page ${pdf.internal.getNumberOfPages()} of ${totalPagesExp}`;

// First line - company info (centered)
pdf.setFontSize(9);
pdf.setTextColor(255, 255, 255);
const centerX1 = (pageWidth - pdf.getTextWidth(footerText1)) / 2;
pdf.text(footerText1, centerX1, pageHeight - 13);

// Second line - copyright centered, page number right
pdf.setFontSize(8);
const centerX2 = (pageWidth - pdf.getTextWidth(footerText2)) / 2;
pdf.text(footerText2, centerX2, pageHeight - 6);
pdf.text(pageText, pageWidth - pdf.getTextWidth(pageText) - 14, pageHeight - 6);

  
        // -- Watermark --
        pdf.saveGraphicsState();
        pdf.setTextColor(180);
        pdf.setFontSize(40);
        pdf.setFont("helvetica", "bold");
        pdf.setGState(new pdf.GState({ opacity: 0.3 }));
        pdf.text("MediHeaven", pageWidth / 2, pageHeight / 2, {
          angle: 45,
          align: "center",
        });
        pdf.restoreGraphicsState();
  
        if (typeof pdf.putTotalPages === "function") {
          pdf.putTotalPages(totalPagesExp);
        }
  
        pdf.save("Search_History_Categorized.pdf");
      })
      .catch((err) => {
        console.error("Logo load failed", err);
        alert("PDF export failed – logo not found or blocked.");
      });
  };
  

  // const handlePDFDownload = async () => {
  //   const input = componentRef.current;
  //   const canvas = await html2canvas(input, { scale: 2 });
  //   const imgData = canvas.toDataURL("image/png");
  //   const pdf = new jsPDF("p", "mm", "a4");

  //   pdf.setFontSize(18);
  //   pdf.text("Mediheaven - Feedback Report", 14, 20);
  //   pdf.setFontSize(11);
  //   pdf.text("Email: mediheaven@gmail.com", 14, 30);
  //   pdf.text("Generated by: E.S.S Sasindi", 14, 36);
  //   pdf.text("Contact No: 0760931478", 14, 42);
  //   pdf.text(`Generated on: ${new Date().toLocaleString()}`, 14, 48);
  //   pdf.line(14, 50, 196, 50);

  //   const imgProps = pdf.getImageProperties(imgData);
  //   const pdfWidth = pdf.internal.pageSize.getWidth();
  //   const contentHeight = (imgProps.height * pdfWidth) / imgProps.width;

  //   pdf.addImage(imgData, "PNG", 10, 55, pdfWidth - 20, contentHeight);
  //   pdf.save("Feedback_Report.pdf");
  // };

  const getAverageRating = () => {
    if (!feedbacks.length) return 0;
    const total = feedbacks.reduce((sum, fb) => sum + Number(fb.rating), 0);
    return (total / feedbacks.length).toFixed(1);
  };

  const handlePDFDownload = async () => {
    const input = componentRef.current;
    const canvas = await html2canvas(input, { scale: 2 });
    const imgData = canvas.toDataURL("image/png");
    const pdf = new jsPDF("p", "mm", "a4");
  
    const logoPath = `${window.location.origin}/mediheavenlogo.png`;
    const headerColor = [0, 128, 0];
    const dateStr = new Date().toLocaleString();
    const totalPagesExp = "{total_pages_count_string}";
  
    const loadImage = (url) => {
      return new Promise((resolve, reject) => {
        const img = new Image();
        img.crossOrigin = "anonymous";
        img.src = url;
        img.onload = () => resolve(img);
        img.onerror = reject;
      });
    };
  
    loadImage(logoPath)
      .then((img) => {
        const pageWidth = pdf.internal.pageSize.getWidth();
        const pageHeight = pdf.internal.pageSize.getHeight();
  
        const contentYStart = 60;
        const imgProps = pdf.getImageProperties(imgData);
        const contentHeight = (imgProps.height * (pageWidth - 20)) / imgProps.width;
  
        // -- Header --
        pdf.setFillColor(...headerColor);
        pdf.rect(0, 0, pageWidth, 30, "F");
        pdf.addImage(img, "PNG", 10, 5, 15, 15);
        pdf.setTextColor(255, 255, 255);
        pdf.setFont("helvetica", "bold");
        pdf.setFontSize(16);
        pdf.text("MediHeaven - Feedback Report", 30, 12);
  
        pdf.setFontSize(9);
        pdf.setFont("helvetica", "normal");
        pdf.text("Generated by: E.S.S Sasindi", 30, 18);
        pdf.text("Contact No: 0760931478", 30, 23);
        pdf.text("Email: sasindi@gmail.com", 110, 18);
        pdf.text(`Generated on: ${dateStr}`, 110, 23);
  
        // -- Content --
        pdf.addImage(imgData, "PNG", 10, contentYStart, pageWidth - 20, contentHeight);
  
        // -- Footer --
        pdf.setFillColor(...headerColor);
        pdf.rect(0, pageHeight - 20, pageWidth, 20, "F");
  
        const footerText1 =
          "MediHeaven Pvt Ltd | No. 123, Janithma Med Lab, Nikaweratiya | Hotline: 037-4657329 | Email: mediheaven25@gmail.com";
        const footerText2 = "© 2025 MediHeaven. All rights reserved.";
        const centerX1 = (pageWidth - pdf.getTextWidth(footerText1)) / 2;
        const centerX2 = (pageWidth - pdf.getTextWidth(footerText2)) / 2;
  
        pdf.setFontSize(9);
        pdf.setTextColor(255, 255, 255);
        pdf.text(footerText1, centerX1, pageHeight - 13);
  
        pdf.setFontSize(8);
        pdf.text(footerText2, centerX2, pageHeight - 7);
  
        const pageNumber = pdf.internal.getNumberOfPages();
        const pageText = `Page ${pageNumber} of ${totalPagesExp}`;
        const textWidth = pdf.getTextWidth(pageText);
        pdf.text(pageText, pageWidth - textWidth - 14, pageHeight - 7);
  
        // -- Watermark --
        pdf.saveGraphicsState();
        pdf.setTextColor(180);
        pdf.setFontSize(40);
        pdf.setFont("helvetica", "bold");
        pdf.setGState(new pdf.GState({ opacity: 0.3 }));
        pdf.text("MediHeaven", pageWidth / 2, pageHeight / 2, {
          angle: 45,
          align: "center",
        });
        pdf.restoreGraphicsState();
  
        if (typeof pdf.putTotalPages === "function") {
          pdf.putTotalPages(totalPagesExp);
        }
  
        pdf.save("Feedback_Report.pdf");
      })
      .catch((err) => {
        console.error("Logo load failed", err);
        alert("PDF export failed – logo not found or blocked.");
      });
  };
  

  const getRatingCount = (level) => feedbacks.filter(fb => Number(fb.rating) === level).length;
  const totalFeedbacks = feedbacks.length;

  //new
  const navigate = useNavigate();
    const handleLogout = () => {
      Swal.fire({
        title: "Are you sure?",
        text: "You will be logged out!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, Logout!",
      }).then((result) => {
        if (result.isConfirmed) {
          localStorage.removeItem("token");
          localStorage.removeItem("username");
          localStorage.removeItem("role");
          Swal.fire(
            "Logged Out!",
            "You have successfully logged out.",
            "success"
          );
          navigate("/login"); 
        }
      });
    };


  return (
    <>
    <div className="feedback-display-container">
    
    {/* Home icon on left */}
    <Col xs="auto">
      <FaHome
        size={24}
        style={{ cursor: "pointer", color: "#198754" }}
        onClick={() => navigate("/admindashboard")} 
        title="Home"
      />
    </Col>
     {/* Logout icon on right */}
        <Col xs="auto" className="text-end">
          <FaSignOutAlt
            size={24}
            style={{ cursor: "pointer", color: "#dc3545" }}
            onClick={handleLogout}
            title="Logout"
          />
        </Col>
      <div className="header-row">
        <h2 className="display-title text-success">All Feedback Entries</h2>
        <div className="controls">
          <input
            type="text"
            placeholder="Search by name, email or contact..."
            className="search-bar"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
          <button className="search-btn " onClick={handleSearch}>🔍 Search</button>
          <button className="btn-primary" onClick={handlePDFDownload}>📄 Download Feedback Report</button>
          <button className="btn-primary" onClick={handleDownloadSearchHistory}>📥 Download Search History</button>
        </div>
      </div>

      <div ref={componentRef}>
        {filteredFeedbacks.length === 0 ? (
          <p>No feedback submitted yet.</p>
        ) : (
          <>
            <table className="feedback-table ">
              <thead className="bg-success">
                <tr>
                  <th>Name</th>
                  <th>Email</th>
                  <th>Contact</th>
                  <th>Experience</th>
                  <th>Comments</th>
                  <th>Rating</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredFeedbacks.map((fb, index) => (
                  <tr key={index}>
                    <td>{fb.name}</td>
                    <td>{fb.email}</td>
                    <td>{fb.contact}</td>
                    <td>{fb.response}</td>
                    <td>{fb.comments}</td>
                    <td>{fb.rating}★</td>
                    <td>
                      <button className="edit-btn" onClick={() => handleEdit(fb)}>Edit</button>
                      <button className="delete-btn" onClick={() => handleDelete(fb._id)}>Delete</button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>

            <div className="rating-summary-card full-width">
              <h3>Overall Rating</h3>
              <div className="rating-value">{getAverageRating()} <span className="stars">★★★★★</span></div>
              <p className="based-on">Based on {totalFeedbacks} reviews</p>
              <div className="rating-bars">
                {[5, 4, 3, 2, 1].map((level, idx) => {
                  const count = getRatingCount(level);
                  const percentage = totalFeedbacks ? (count / totalFeedbacks) * 100 : 0;
                  const labels = ["Excellent", "Good", "Average", "Poor", "Very Poor"];
                  return (
                    <div key={idx} className="rating-bar">
                      <span className="label">{labels[idx]}</span>
                      <div className="bar-bg">
                        <div className="bar-fill" style={{ width: `${percentage}%` }}></div>
                      </div>
                      <span className="count">{count}</span>
                    </div>
                  );
                })}
              </div>
            </div>

          
          </>
        )}
      </div>
    </div>
    </>
  );
};

export default FeedbackDisplay;

